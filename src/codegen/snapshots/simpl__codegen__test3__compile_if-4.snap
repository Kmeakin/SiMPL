---
source: src/codegen/test3.rs
expression: module.print_to_string().to_string()
---
; ModuleID = 'test_compile'
source_filename = "test_compile"

%Closure = type { i8*, i8* }
%Env = type {}

define i64 @toplevel() {
toplevel_entry:
  %f = alloca %Closure
  %closure = alloca %Closure
  %closure.code = getelementptr inbounds %Closure, %Closure* %closure, i32 0, i32 0
  store i8* bitcast (i64 (i8*, i1)* @lambda to i8*), i8** %closure.code
  %closure.env = getelementptr inbounds %Closure, %Closure* %closure, i32 0, i32 1
  %malloccall = tail call i8* @malloc(i32 0)
  %closure.env1 = bitcast i8* %malloccall to %Env*
  %closure.env2 = bitcast %Env* %closure.env1 to i8*
  store i8* %closure.env2, i8** %closure.env
  %closure3 = load %Closure, %Closure* %closure
  store %Closure %closure3, %Closure* %f
  %f4 = load %Closure, %Closure* %f
  %closure5 = alloca %Closure
  store %Closure %f4, %Closure* %closure5
  %closure.fn = getelementptr inbounds %Closure, %Closure* %closure5, i32 0, i32 0
  %closure.fn6 = load i8*, i8** %closure.fn
  %closure.fn7 = bitcast i8* %closure.fn6 to i64 (i8*, i1)*
  %closure.env8 = getelementptr inbounds %Closure, %Closure* %closure5, i32 0, i32 1
  %closure.env9 = load i8*, i8** %closure.env8
  %call = call i64 %closure.fn7(i8* %closure.env9, i1 false)
  ret i64 %call
}

define i64 @lambda(i8* %env, i1 %b) {
lambda_entry:
  %env1 = alloca i8*
  store i8* %env, i8** %env1
  %env2 = load i8*, i8** %env1
  %env3 = bitcast i8* %env2 to %Env*
  %b4 = alloca i1
  store i1 %b, i1* %b4
  %b5 = load i1, i1* %b4
  %cmp = icmp eq i1 %b5, true
  br i1 %cmp, label %then, label %else

then:                                             ; preds = %lambda_entry
  br label %cont

else:                                             ; preds = %lambda_entry
  br label %cont

cont:                                             ; preds = %else, %then
  %phi = phi i64 [ 5, %then ], [ 10, %else ]
  ret i64 %phi
}

declare noalias i8* @malloc(i32)

