use std::str::FromStr;
use crate::syntax::ast::*;
use simple_symbol::intern;

grammar;

// Exprs

pub Expr: Expr = {
    LambdaExpr => <>,
    IfExpr => <>,
    LetExpr => <>,
    LetrecExpr => <>,
    CompareExpr => <>,
}

pub MultOp: Expr = {
    <lhs: MultExpr> "*" <rhs: AppExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Mul, op_ty: OpType::IntOp},
    <lhs: MultExpr> "/" <rhs: AppExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Div, op_ty: OpType::IntOp},

    <lhs: MultExpr> "*." <rhs: AppExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Mul, op_ty: OpType::FloatOp},
    <lhs: MultExpr> "/." <rhs: AppExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Div, op_ty: OpType::FloatOp},
}

pub AddOp: Expr = {
    <lhs: AddExpr> "+" <rhs: MultExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Add, op_ty: OpType::IntOp},
    <lhs: AddExpr> "-" <rhs: MultExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Sub, op_ty: OpType::IntOp},

    <lhs: AddExpr> "+." <rhs: MultExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Add, op_ty: OpType::FloatOp},
    <lhs: AddExpr> "-." <rhs: MultExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Sub, op_ty: OpType::FloatOp},
}

pub CmpOp: Expr = {
    <lhs: AddExpr> "<" <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Lt, op_ty: OpType::IntCmp},
    <lhs: AddExpr> "<=" <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Leq, op_ty: OpType::IntCmp},
    <lhs: AddExpr> ">" <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Gt, op_ty: OpType::IntCmp},
    <lhs: AddExpr> ">=" <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Geq, op_ty: OpType::IntCmp},

    <lhs: AddExpr> "<." <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Lt, op_ty: OpType::FloatCmp},
    <lhs: AddExpr> "<=." <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Leq, op_ty: OpType::FloatCmp},
    <lhs: AddExpr> ">." <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Gt, op_ty: OpType::FloatCmp},
    <lhs: AddExpr> ">=." <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Geq, op_ty: OpType::FloatCmp},

    <lhs: AddExpr> "==" <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Eq, op_ty: OpType::AnyCmp},
    <lhs: AddExpr> "!=" <rhs: AddExpr>
          => Expr::Binop {lhs: box lhs, rhs: box rhs, op: Op::Eq, op_ty: OpType::AnyCmp},
}

pub MultExpr: Expr = {
    AppExpr,
    MultOp,
}

pub AddExpr: Expr = {
    MultExpr,
    AddOp,
}

pub CompareExpr: Expr = {
    AddExpr,
    CmpOp,
}


pub Type: Type = {
    <t1: AtomType> "->" <t2: Type> => Type::Fn(box t1, box t2),
    AtomType => <>,
}

AtomType: Type = {
    "Int" => Type::Int,
    "Bool" => Type::Bool,
    "Float" => Type::Float,
    "(" <Type> ")" => <>,
}

pub AppExpr: Expr = {
    MatchExpr => <>,
    App => <>,
}

App: Expr = {
    <func:AppExpr> <arg:MatchExpr> => Expr::App {func: box func, arg: box arg},
}

pub LambdaExpr: Expr = {
    "\\" <params:Comma1<Param>> "->" <body:Expr> => Expr::Lambda {params, body: box body},
}

Param: Param = {
    <name: Symbol> => Param {name, ann: None},
    <name: Symbol> ":" <ty: AtomType> => Param {name, ann: Some(ty)},
}

pub IfExpr: Expr = {
    "if" <test:Expr> "then" <then:Expr> "else" <els:Expr>
         => Expr::If {test: box test, then: box then, els: box els},
}

pub LetExpr: Expr = {
    "let" <bindings:Comma1<LetBinding>> "in" <body:Expr>
          => Expr::Let {bindings, body: box body},
}

LetBinding: LetBinding = {
    <name:Symbol> "=" <val:Expr> => LetBinding {name, ann: None, val: box val},
    <name:Symbol> ":" <ty: Type> "=" <val:Expr> => LetBinding {name, ann: Some(ty), val: box val},
}


pub LetrecExpr: Expr = {
    "letrec" <bindings:Comma1<LetrecBinding>> "in" <body:Expr>
          => Expr::Letrec {bindings, body: box body},
}

LetrecBinding: LetBinding = {
    <name:Symbol> "=" <val:LambdaExpr> => LetBinding {name, ann: None, val: box val},
    <name:Symbol> ":" <ty: Type> "=" <val:LambdaExpr> => LetBinding {name, ann: Some(ty), val: box val},
}


MatchExpr: Expr = {
    SimpleExpr => <>,
    // TODO: pattern matching
}

pub SimpleExpr: Expr = {
    VarExpr => <>,
    LitExpr => <>,
    "(" <Expr> ")" => <>,
}

pub VarExpr: Expr = {
    <Symbol> => Expr::Var {name: <>.into()},
}

pub LitExpr: Expr = {
    Lit => Expr::Lit {val: <>},
}

pub Lit: Lit = {
    Bool => Lit::Bool(<>),
    Int => Lit::Int(<>),
    Float => Lit::Float(<>),
}

// Terminals

pub Symbol: Symbol = {
    <s:r"[a-zA-Z][a-zA-Z0-9_]*"> => intern(String::from(<>)),
}

pub Bool: bool = {
    "true" => true,
    "false" => false,
}

pub Int: i64 = {
    <s:r"(-|\+)?[0-9]+"> => i64::from_str(s).unwrap(),
}

pub Float: f64 = {
    <s:r"(-|\+)?[0-9]+\.[0-9]+"> => f64::from_str(s).unwrap(),
    <s:r"(-|\+)?[0-9]+\.[0-9]+(e|E)(-|\+)?[0-9]+"> => f64::from_str(s).unwrap(),
}

// Helpers

#[inline]
// List of T delimited by D. Trailing delimiter accepted.
Delim<T, D>: Vec<T> = {
    <v:(<T> <D>)*> <e:T?> => match e {
        None => v.iter().map(|x| x.0.clone()).collect(),
        Some(e) => {
            let mut v = v.iter().map(|x| x.0.clone()).collect::<Vec<_>>();
            v.push(e);
            v
        }
    }
}

#[inline]
// List of atleast 1 T delimited by D. Trailing delimiter accepted.
Delim1<T, D>: Vec<T> = {
    <v:(<T> <D>)+> => {
        let v = v.iter().map(|x| x.0.clone()).collect::<Vec<_>>();
        v
    },
    Delim1NoTrail<T, D> => <>,
}

#[inline]
// List of atleast 1 T delimited by D. Trailing delimiter not accepted.
Delim1NoTrail<T, D>: Vec<T> = {
    <v:(<T> <D>)*> <e:T> => {
        let mut v = v.iter().map(|x| x.0.clone()).collect::<Vec<_>>();
        v.push(e);
        v
    }
}

#[inline]
Comma<T> = Delim<T, ",">;

#[inline]
Comma1<T> = Delim1<T, ",">;

#[inline]
Comma1NoTrail<T> = Delim1NoTrail<T, ",">;
